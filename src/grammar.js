exports.grammarSource = String.raw `
Arithmetic {

  Program = Statement*

  Statement
    = CreateTable | comment | ddlcomment | ddlIndex

  CreateTable
    = "create" "table" name "(" columnDefinition ("," columnDefinition)* ")" spaces ";"

  //columnDefinitiona
  //  =  name spaces generatedTypeConstraint spaces notNull
  //  | name spaces generatedType spaces notNull
  //  | name spaces fkConstraint spaces notNull
  //  | name spaces dataType spaces notNull
   
   columnDefinition =
       name spaces dataType generated? check? constraint? pkconstraint? notNull?
    
    generatedType = dataType spaces generated
    
    //generatedTypeConstraint = dataType spaces generated spaces pkconstraint
    
    fkConstraint = spaces dataType spaces constraint
    
    notNull = spaces "not null" 
    
   constraint = spaces "constraint" spaces name spaces "references" spaces name spaces "on delete cascade"
   pkconstraint = spaces "constraint" spaces name spaces "primary key"
   check = spaces "constraint" spaces name spaces "check" spaces "(" name spaces "in ('Y','N'))"
   generated = spaces "generated by default on null as identity"
    
   dataType = "number" | varchar | "date" | "clob"
   
   varchar = "varchar2(" spaces varSize spaces ")"
   varSize = digit+ spaces name
  
  ddlcomment = "comment on" spaces ddlCommentTable spaces "is" spaces (~";" any)+ ";"
  |"comment on" spaces ddlCommentColumn spaces "is" spaces (~";" any)+ ";"
  ddlCommentTable = "table" spaces name
  ddlCommentColumn = "column" spaces name"."name
  
  ddlIndex = "create index" spaces name spaces "on" spaces name spaces "("name");"


  name
    = letter (letter | digit | "_")*
  comment = "--"(~nl any)* nl
  nl = "\n" | end
}

  `;